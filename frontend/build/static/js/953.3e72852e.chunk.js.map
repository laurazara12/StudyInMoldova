{"version":3,"file":"static/js/953.3e72852e.chunk.js","mappings":"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","sources":["views/profile/profile-tabs/components/document-counter.js","views/profile/profile-tabs/documents-tab.js"],"sourcesContent":["import React from 'react';\nimport './document-counter.css';\n\nconst DocumentCounter = ({ documents = [], documentTypes = [] }) => {\n  const getPendingDocumentsCount = () => {\n    return documents.filter(doc => doc && doc.status === 'pending').length;\n  };\n\n  const getApprovedDocumentsCount = () => {\n    return documents.filter(doc => doc && doc.status === 'approved').length;\n  };\n\n  const getRejectedDocumentsCount = () => {\n    return documents.filter(doc => doc && doc.status === 'rejected').length;\n  };\n\n  const getUploadedDocumentsCount = () => {\n    return documents.filter(doc => doc && doc.status !== 'deleted').length;\n  };\n\n  const getTotalDocumentsCount = () => {\n    return documentTypes.length;\n  };\n\n  return (\n    <div className=\"document-counter\">\n      <div className=\"document-stats\">\n        <div className=\"document-stat\">\n          <span className=\"stat-label\">Uploaded Documents</span>\n          <span className=\"stat-value\">{getUploadedDocumentsCount()}/{getTotalDocumentsCount()}</span>\n        </div>\n        <div className=\"document-stat\">\n          <span className=\"stat-label\">Pending</span>\n          <span className=\"stat-value status-pending\">{getPendingDocumentsCount()}</span>\n        </div>\n        <div className=\"document-stat\">\n          <span className=\"stat-label\">Approved</span>\n          <span className=\"stat-value status-approved\">{getApprovedDocumentsCount()}</span>\n        </div>\n        <div className=\"document-stat\">\n          <span className=\"stat-label\">Rejected</span>\n          <span className=\"stat-value status-rejected\">{getRejectedDocumentsCount()}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentCounter; ","import React, { useState, useEffect } from 'react';\nimport { API_BASE_URL, getAuthHeaders, handleApiError } from '../../../config/api.config';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport DocumentCounter from './components/document-counter';\nimport './documents-tab.css';\n\nconst documentTypes = [\n  { id: 'diploma', name: 'Diploma', description: 'Bachelor\\'s degree or equivalent' },\n  { id: 'transcript', name: 'Transcript', description: 'Grade transcript' },\n  { id: 'passport', name: 'Passport', description: 'Valid passport' },\n  { id: 'photo', name: 'Photo', description: 'Recent 3x4 photo' },\n  { id: 'medical', name: 'Medical Certificate', description: 'Medical certificate' },\n  { id: 'insurance', name: 'Medical Insurance', description: 'Medical insurance' },\n  { id: 'other', name: 'Other Documents', description: 'Other documents' },\n  { id: 'cv', name: 'CV', description: 'Curriculum Vitae' }\n];\n\nconst DocumentsTab = ({ userData }) => {\n  const [documents, setDocuments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState({});\n  const [buttonStates, setButtonStates] = useState({});\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [documentStats, setDocumentStats] = useState({ pending: 0, approved: 0, rejected: 0 });\n\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n\n  useEffect(() => {\n    // Save button states in localStorage\n    const saveButtonState = () => {\n      const newButtonStates = {};\n      documentTypes.forEach(docType => {\n        const document = documents.find(d => d && d.document_type === docType.id);\n        if (document && document.status !== 'deleted') {\n          newButtonStates[docType.id] = {\n            isDownloadActive: true,\n            isDeleteActive: document.status !== 'rejected'\n          };\n        }\n      });\n      setButtonStates(newButtonStates);\n      localStorage.setItem('documentButtonStates', JSON.stringify(newButtonStates));\n    };\n\n    saveButtonState();\n  }, [documents]);\n\n  const fetchDocuments = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await axios.get(`${API_BASE_URL}/api/documents/user-documents`, {\n        headers: getAuthHeaders()\n      });\n\n      console.log('Server response documents:', response.data);\n\n      if (!response.data) {\n        throw new Error('No data received from server');\n      }\n\n      if (!response.data.success) {\n        throw new Error(response.data.message || 'Error loading documents');\n      }\n\n      const documentsData = response.data.data || [];\n      console.log(`Found ${documentsData.length} documents`);\n\n      // Filtrăm documentele șterse\n      const activeDocuments = documentsData.filter(doc => doc.status !== 'deleted');\n      console.log(`Found ${activeDocuments.length} active documents out of ${documentsData.length} total`);\n\n      const processedDocuments = activeDocuments.map(doc => ({\n        id: doc.id,\n        document_type: doc.document_type,\n        status: doc.status || 'pending',\n        filename: doc.filename,\n        originalName: doc.originalName,\n        createdAt: doc.createdAt,\n        uploadDate: doc.uploadDate || doc.createdAt,\n        file_path: doc.file_path\n      }));\n\n      console.log('Processed documents:', processedDocuments);\n      setDocuments(processedDocuments);\n\n      // Actualizăm statisticile din răspunsul serverului\n      if (response.data.status) {\n        setDocumentStats(response.data.status);\n      } else {\n        // Fallback la calculul local dacă statisticile nu sunt în răspuns\n        const statusCounts = {\n          pending: processedDocuments.filter(doc => doc.status === 'pending').length,\n          approved: processedDocuments.filter(doc => doc.status === 'approved').length,\n          rejected: processedDocuments.filter(doc => doc.status === 'rejected').length\n        };\n        setDocumentStats(statusCounts);\n      }\n    } catch (error) {\n      console.error('Error loading documents:', error);\n      setError('Error loading documents: ' + error.message);\n      setDocuments([]);\n      setDocumentStats({ pending: 0, approved: 0, rejected: 0 });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFileSelect = (docTypeId) => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.pdf,.jpg,.jpeg,.png,.doc,.docx,.xls,.xlsx';\n    \n    input.onchange = (e) => {\n      const file = e.target.files[0];\n      if (file) {\n        if (file.size > 10 * 1024 * 1024) {\n          toast.error('File is too large. Maximum allowed size is 10MB.');\n          return;\n        }\n\n        const allowedTypes = [\n          'application/pdf',\n          'image/jpeg',\n          'image/jpg',\n          'image/png',\n          'application/msword',\n          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n          'application/vnd.ms-excel',\n          'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'\n        ];\n        if (!allowedTypes.includes(file.type)) {\n          toast.error('Unsupported file type. Only PDF, JPG, JPEG, PNG, DOC, DOCX, XLS and XLSX files are accepted.');\n          return;\n        }\n        \n        setUploadStatus(prev => ({\n          ...prev,\n          [docTypeId]: {\n            file,\n            uploading: false,\n            uploaded: false,\n            progress: 0\n          }\n        }));\n      }\n    };\n\n    input.click();\n  };\n\n  const handleUpload = async (docTypeId) => {\n    try {\n      const file = uploadStatus[docTypeId]?.file;\n      if (!file) {\n        throw new Error('No file selected');\n      }\n\n      setUploadStatus(prev => ({\n        ...prev,\n        [docTypeId]: { ...prev[docTypeId], uploading: true }\n      }));\n\n      const formData = new FormData();\n      formData.append('document_type', docTypeId);\n      formData.append('file', file);\n      formData.append('status', 'pending');\n\n      const response = await axios.post(\n        `${API_BASE_URL}/api/documents/upload`,\n        formData,\n        {\n          headers: {\n            ...getAuthHeaders(),\n            'Content-Type': 'multipart/form-data'\n          },\n          onUploadProgress: (progressEvent) => {\n            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n            setUploadStatus(prev => ({\n              ...prev,\n              [docTypeId]: { ...prev[docTypeId], progress }\n            }));\n          }\n        }\n      );\n\n      if (!response || !response.data) {\n        throw new Error('No response received from server');\n      }\n\n      if (response.data.success) {\n        const newDocument = {\n          ...response.data.data,\n          status: response.data.data?.status || 'pending',\n          document_type: docTypeId,\n          uploadDate: new Date(),\n          createdAt: new Date()\n        };\n        \n        // Update documents list\n        setDocuments(prev => {\n          const updatedDocs = prev.filter(doc => doc.document_type !== docTypeId);\n          return [...updatedDocs, newDocument];\n        });\n        \n        // Update button states\n        setButtonStates(prev => ({\n          ...prev,\n          [docTypeId]: {\n            isDownloadActive: true,\n            isDeleteActive: true\n          }\n        }));\n\n\n        await fetchDocuments();\n\n        toast.success('Document uploaded successfully');\n        setUploadStatus(prev => ({\n          ...prev,\n          [docTypeId]: { ...prev[docTypeId], uploaded: true }\n        }));\n      } else {\n        throw new Error(response.data.message || 'Error uploading document');\n      }\n    } catch (error) {\n      console.error('Error uploading document:', error);\n      toast.error(error.message || 'An error occurred while uploading the document');\n    } finally {\n      setUploadStatus(prev => ({\n        ...prev,\n        [docTypeId]: { ...prev[docTypeId], uploading: false }\n      }));\n    }\n  };\n\n  const handleDownload = async (documentId) => {\n    try {\n      const doc = documents.find(doc => doc.id === documentId);\n      const fileName = doc?.originalName || 'document';\n  \n      const response = await axios.get(\n        `${API_BASE_URL}/api/documents/${documentId}`,\n        {\n          headers: getAuthHeaders(),\n          responseType: 'blob',\n        }\n      );\n  \n      const url = window.URL.createObjectURL(response.data);\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', fileName);\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n      window.URL.revokeObjectURL(url);\n  \n    } catch (error) {\n      console.error('Error downloading document:', error);\n      toast.error(handleApiError(error));\n    }\n  };\n  \n\n  const handleDocumentDelete = async (documentId) => {\n    const confirmDelete = window.confirm('Are you sure you want to delete the document?');\n    if (!confirmDelete) return;\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await axios.delete(`${API_BASE_URL}/api/documents/${documentId}`, {\n        headers: getAuthHeaders()\n      });\n\n      if (response.data.success) {\n        await fetchDocuments();\n        setSuccessMessage('Document deleted successfully');\n        setTimeout(() => setSuccessMessage(null), 3000);\n      } else {\n        throw new Error(response.data.message || 'Error deleting document');\n      }\n    } catch (error) {\n      console.error('Error deleting document:', error);\n      if (error.response) {\n        if (error.response.status === 404) {\n          setError('Document not found');\n        } else if (error.response.status === 403) {\n          setError('You do not have permission to delete this document');\n        } else {\n          setError(error.response.data.message || 'Error deleting document');\n        }\n      } else {\n        setError(error.message || 'Error communicating with server');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getButtonState = (docTypeId) => {\n    const savedStates = JSON.parse(localStorage.getItem('documentButtonStates') || '{}');\n    return savedStates[docTypeId] || { isDownloadActive: false, isDeleteActive: false };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"documents-section\">\n        <div className=\"loading\">Loading documents...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"documents-section\">\n        <div className=\"error-message\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"documents-section\">\n      <h2>My Documents</h2>\n      \n      <DocumentCounter \n        documents={documents}\n        documentTypes={documentTypes}\n      />\n\n      <div className=\"documents-grid\">\n        {documentTypes.map((docType) => {\n          const document = documents?.find(d => d?.document_type === docType.id) || null;\n          const uploadStatusForType = uploadStatus[docType.id];\n          const isDocumentValid = document && document.status !== 'deleted';\n          const buttonState = getButtonState(docType.id);\n          \n          return (\n            <div key={docType.id} className=\"document-item\">\n              <div className=\"document-info\">\n                <h3>{docType.name}</h3>\n                <p>{docType.description}</p>\n                {isDocumentValid && (\n                  <>\n                    <p className={`status-${document.status}`}>Status: {\n                      document.status === 'pending' ? 'Processing' :\n                      document.status === 'approved' ? 'Approved' :\n                      document.status === 'rejected' ? 'Rejected' :\n                      document.status === 'deleted' ? 'Deleted' : document.status\n                    }</p>\n                    <p>Uploaded: {new Date(document.uploadDate || document.createdAt).toLocaleDateString()}</p>\n                  </>\n                )}\n              </div>\n              <div className=\"document-actions\">\n                {isDocumentValid ? (\n                  <>\n                    <button \n                      className={`download-button ${buttonState.isDownloadActive ? 'active' : ''}`}\n                      onClick={() => handleDownload(document.id)}\n                    >\n                      Download\n                    </button>\n                    <button \n                      className={`delete-button ${buttonState.isDeleteActive ? 'active' : ''}`}\n                      onClick={() => handleDocumentDelete(document.id)}\n                    >\n                      Delete\n                    </button>\n                  </>\n                ) : (\n                  <>\n                    {uploadStatusForType?.file && !uploadStatusForType?.uploaded && (\n                      <button \n                        className=\"upload-button\"\n                        onClick={() => handleUpload(docType.id)}\n                        disabled={uploadStatusForType.uploading}\n                      >\n                        {uploadStatusForType.uploading ? 'Uploading...' : 'Upload'}\n                      </button>\n                    )}\n                    {!uploadStatusForType?.file && (\n                      <button \n                        className=\"choose-button\"\n                        onClick={() => handleFileSelect(docType.id)}\n                      >\n                        Choose File\n                      </button>\n                    )}\n                  </>\n                )}\n              </div>\n              {uploadStatusForType?.uploading && (\n                <div className=\"upload-progress\">\n                  <div \n                    className=\"progress-bar\"\n                    style={{ width: `${uploadStatusForType.progress}%` }}\n                  ></div>\n                  <span>{uploadStatusForType.progress}%</span>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentsTab;\n"],"names":["_ref","documents","documentTypes","_jsx","className","children","_jsxs","filter","doc","status","length","id","name","description","userData","setDocuments","useState","loading","setLoading","error","setError","uploadStatus","setUploadStatus","buttonStates","setButtonStates","successMessage","setSuccessMessage","documentStats","setDocumentStats","pending","approved","rejected","useEffect","fetchDocuments","saveButtonState","newButtonStates","forEach","docType","document","find","d","document_type","isDownloadActive","isDeleteActive","localStorage","setItem","JSON","stringify","async","response","axios","get","API_BASE_URL","headers","getAuthHeaders","console","log","data","Error","success","message","documentsData","activeDocuments","processedDocuments","map","filename","originalName","createdAt","uploadDate","file_path","statusCounts","handleFileSelect","docTypeId","input","createElement","type","accept","onchange","e","file","target","files","size","toast","includes","prev","uploading","uploaded","progress","click","handleDownload","documentId","fileName","responseType","url","window","URL","createObjectURL","link","href","setAttribute","body","appendChild","remove","revokeObjectURL","handleApiError","DocumentCounter","uploadStatusForType","isDocumentValid","buttonState","parse","getItem","_Fragment","Date","toLocaleDateString","onClick","confirm","delete","setTimeout","handleDocumentDelete","_uploadStatus$docType","formData","FormData","append","post","onUploadProgress","progressEvent","Math","round","loaded","total","_response$data$data","newDocument","handleUpload","disabled","style","width"],"sourceRoot":""}