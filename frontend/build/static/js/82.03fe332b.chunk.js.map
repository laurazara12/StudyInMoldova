{"version":3,"file":"static/js/82.03fe332b.chunk.js","mappings":"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","sources":["components/document-counter.js","views/profile/profile-tabs/documents-tab.js"],"sourcesContent":["import React from 'react';\nimport './document-counter.css';\n\nconst DocumentCounter = ({ documents = [], documentTypes = [] }) => {\n  const getPendingDocumentsCount = () => {\n    return documents.filter(doc => doc && doc.status === 'pending').length;\n  };\n\n  const getApprovedDocumentsCount = () => {\n    return documents.filter(doc => doc && doc.status === 'approved').length;\n  };\n\n  const getRejectedDocumentsCount = () => {\n    return documents.filter(doc => doc && doc.status === 'rejected').length;\n  };\n\n  const getUploadedDocumentsCount = () => {\n    return documents.filter(doc => doc && doc.status !== 'deleted').length;\n  };\n\n  const getTotalDocumentsCount = () => {\n    return documentTypes.length;\n  };\n\n  return (\n    <div className=\"document-counter\">\n      <div className=\"document-stats\">\n        <div className=\"document-stat\">\n          <span className=\"stat-label\">Documente încărcate</span>\n          <span className=\"stat-value\">{getUploadedDocumentsCount()}/{getTotalDocumentsCount()}</span>\n        </div>\n        <div className=\"document-stat\">\n          <span className=\"stat-label\">În așteptare</span>\n          <span className=\"stat-value status-pending\">{getPendingDocumentsCount()}</span>\n        </div>\n        <div className=\"document-stat\">\n          <span className=\"stat-label\">Aprobate</span>\n          <span className=\"stat-value status-approved\">{getApprovedDocumentsCount()}</span>\n        </div>\n        <div className=\"document-stat\">\n          <span className=\"stat-label\">Respinse</span>\n          <span className=\"stat-value status-rejected\">{getRejectedDocumentsCount()}</span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentCounter; ","import React, { useState, useEffect } from 'react';\nimport { API_BASE_URL, getAuthHeaders, handleApiError } from '../../../config/api.config';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport DocumentCounter from '../../../components/document-counter';\nimport './documents-tab.css';\n\nconst documentTypes = [\n  { id: 'diploma', name: 'Diploma', description: 'Diploma de bacalaureat sau echivalent' },\n  { id: 'transcript', name: 'Transcript', description: 'Foaia matricolă cu notele' },\n  { id: 'passport', name: 'Pașaport', description: 'Pașaport valid' },\n  { id: 'photo', name: 'Fotografie', description: 'Fotografie recentă 3x4' },\n  { id: 'medical', name: 'Certificat Medical', description: 'Certificat medical' },\n  { id: 'insurance', name: 'Asigurare Medicală', description: 'Asigurare medicală' },\n  { id: 'other', name: 'Alte Documente', description: 'Alte documente' },\n  { id: 'cv', name: 'CV', description: 'Curriculum Vitae' }\n];\n\nconst DocumentsTab = ({ userData }) => {\n  const [documents, setDocuments] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState({});\n  const [buttonStates, setButtonStates] = useState({});\n  const [successMessage, setSuccessMessage] = useState(null);\n\n  useEffect(() => {\n    fetchDocuments();\n  }, []);\n\n  useEffect(() => {\n    // Salvăm starea butoanelor în localStorage\n    const saveButtonState = () => {\n      const newButtonStates = {};\n      documentTypes.forEach(docType => {\n        const document = documents.find(d => d && d.document_type === docType.id);\n        if (document && document.status !== 'deleted') {\n          newButtonStates[docType.id] = {\n            isDownloadActive: true,\n            isDeleteActive: document.status !== 'rejected'\n          };\n        }\n      });\n      setButtonStates(newButtonStates);\n      localStorage.setItem('documentButtonStates', JSON.stringify(newButtonStates));\n    };\n\n    saveButtonState();\n  }, [documents]);\n\n  const fetchDocuments = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      const response = await axios.get(`${API_BASE_URL}/api/documents/user-documents`, {\n        headers: getAuthHeaders()\n      });\n\n      if (!response.data) {\n        throw new Error('Nu s-au primit date de la server');\n      }\n\n      let documentsData = [];\n      if (response.data.success && response.data.data) {\n        documentsData = Array.isArray(response.data.data) ? response.data.data : [response.data.data];\n      } else if (Array.isArray(response.data)) {\n        documentsData = response.data;\n      } else if (response.data.documents && Array.isArray(response.data.documents)) {\n        documentsData = response.data.documents;\n      }\n\n      // Filtrăm documentele șterse și ne asigurăm că toate proprietățile necesare sunt prezente\n      const processedDocuments = documentsData\n        .filter(doc => doc && doc.status !== 'deleted')\n        .map(doc => ({\n          id: doc.id,\n          document_type: doc.document_type,\n          name: doc.name || doc.document_type,\n          status: doc.status || 'pending',\n          url: doc.url || doc.file_path,\n          uploadDate: doc.uploadDate || doc.createdAt,\n          createdAt: doc.createdAt\n        }));\n\n      setDocuments(processedDocuments);\n    } catch (error) {\n      console.error('Eroare la obținerea documentelor:', error);\n      setError(handleApiError(error));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleFileSelect = (docTypeId) => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.pdf,.jpg,.jpeg,.png';\n    \n    input.onchange = (e) => {\n      const file = e.target.files[0];\n      if (file) {\n        // Verificăm dimensiunea fișierului (10MB)\n        if (file.size > 10 * 1024 * 1024) {\n          toast.error('Fișierul este prea mare. Dimensiunea maximă permisă este de 10MB.');\n          return;\n        }\n\n        // Verificăm tipul fișierului\n        const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png'];\n        if (!allowedTypes.includes(file.type)) {\n          toast.error('Tip de fișier neacceptat. Sunt acceptate doar fișiere PDF, JPG, JPEG și PNG.');\n          return;\n        }\n        \n        setUploadStatus(prev => ({\n          ...prev,\n          [docTypeId]: {\n            file,\n            uploading: false,\n            uploaded: false,\n            progress: 0\n          }\n        }));\n      }\n    };\n\n    input.click();\n  };\n\n  const handleUpload = async (docTypeId) => {\n    try {\n      const file = uploadStatus[docTypeId]?.file;\n      if (!file) {\n        throw new Error('Nu a fost selectat niciun fișier');\n      }\n\n      setUploadStatus(prev => ({\n        ...prev,\n        [docTypeId]: { ...prev[docTypeId], uploading: true }\n      }));\n\n      const formData = new FormData();\n      formData.append('file', file);\n      formData.append('document_type', docTypeId);\n      formData.append('status', 'pending');\n\n      const response = await axios.post(\n        `${API_BASE_URL}/api/documents/upload`,\n        formData,\n        {\n          headers: {\n            ...getAuthHeaders(),\n            'Content-Type': 'multipart/form-data'\n          },\n          onUploadProgress: (progressEvent) => {\n            const progress = Math.round((progressEvent.loaded * 100) / progressEvent.total);\n            setUploadStatus(prev => ({\n              ...prev,\n              [docTypeId]: { ...prev[docTypeId], progress }\n            }));\n          }\n        }\n      );\n\n      if (!response || !response.data) {\n        throw new Error('Nu s-a primit niciun răspuns de la server');\n      }\n\n      if (response.data.success) {\n        const newDocument = {\n          ...response.data.data,\n          status: response.data.data?.status || 'pending',\n          document_type: docTypeId,\n          uploadDate: new Date(),\n          createdAt: new Date()\n        };\n        \n        // Actualizăm lista de documente\n        setDocuments(prev => {\n          const updatedDocs = prev.filter(doc => doc.document_type !== docTypeId);\n          return [...updatedDocs, newDocument];\n        });\n        \n        // Actualizăm starea butoanelor\n        setButtonStates(prev => ({\n          ...prev,\n          [docTypeId]: {\n            isDownloadActive: true,\n            isDeleteActive: true\n          }\n        }));\n\n        // Reîncărcăm toate documentele pentru a ne asigura că avem datele cele mai recente\n        await fetchDocuments();\n\n        toast.success('Document încărcat cu succes');\n        setUploadStatus(prev => ({\n          ...prev,\n          [docTypeId]: { ...prev[docTypeId], uploaded: true }\n        }));\n      } else {\n        throw new Error(response.data.message || 'Eroare la încărcarea documentului');\n      }\n    } catch (error) {\n      console.error('Eroare la încărcarea documentului:', error);\n      toast.error(error.message || 'A apărut o eroare la încărcarea documentului');\n    } finally {\n      setUploadStatus(prev => ({\n        ...prev,\n        [docTypeId]: { ...prev[docTypeId], uploading: false }\n      }));\n    }\n  };\n\n  const handleDownload = async (documentId) => {\n    try {\n      const response = await axios.get(\n        `${API_BASE_URL}/api/documents/${documentId}/download`,\n        {\n          headers: getAuthHeaders(),\n          responseType: 'blob'\n        }\n      );\n\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', 'document.pdf');\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n    } catch (error) {\n      console.error('Eroare la descărcarea documentului:', error);\n      toast.error(handleApiError(error));\n    }\n  };\n\n  const handleDocumentDelete = async (documentId) => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      // Verificăm mai întâi dacă documentul există\n      const document = documents.find(doc => doc.id === documentId);\n      if (!document) {\n        throw new Error('Documentul nu a fost găsit');\n      }\n\n      const response = await axios.delete(`${API_BASE_URL}/api/documents/${documentId}`, {\n        headers: getAuthHeaders()\n      });\n\n      if (response.data.success) {\n        // Actualizăm lista de documente\n        const updatedDocuments = documents.filter(doc => doc.id !== documentId);\n        setDocuments(updatedDocuments);\n        \n        // Afișăm mesajul de succes\n        setSuccessMessage('Document șters cu succes');\n        setTimeout(() => setSuccessMessage(null), 3000);\n      } else {\n        throw new Error(response.data.message || 'Eroare la ștergerea documentului');\n      }\n    } catch (error) {\n      console.error('Error deleting document:', error);\n      if (error.response) {\n        if (error.response.status === 404) {\n          setError('Documentul nu a fost găsit');\n        } else if (error.response.status === 403) {\n          setError('Nu aveți permisiunea de a șterge acest document');\n        } else {\n          setError(error.response.data.message || 'Eroare la ștergerea documentului');\n        }\n      } else {\n        setError(error.message || 'Eroare la comunicarea cu serverul');\n      }\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getButtonState = (docTypeId) => {\n    const savedStates = JSON.parse(localStorage.getItem('documentButtonStates') || '{}');\n    return savedStates[docTypeId] || { isDownloadActive: false, isDeleteActive: false };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"documents-section\">\n        <div className=\"loading\">Se încarcă documentele...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"documents-section\">\n        <div className=\"error-message\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"documents-section\">\n      <h2>Documentele Mele</h2>\n      \n      <DocumentCounter \n        documents={documents}\n        documentTypes={documentTypes}\n      />\n\n      <div className=\"documents-grid\">\n        {documentTypes.map((docType) => {\n          const document = documents?.find(d => d?.document_type === docType.id) || null;\n          const uploadStatusForType = uploadStatus[docType.id];\n          const isDocumentValid = document && document.status !== 'deleted';\n          const buttonState = getButtonState(docType.id);\n          \n          return (\n            <div key={docType.id} className=\"document-item\">\n              <div className=\"document-info\">\n                <h3>{docType.name}</h3>\n                <p>{docType.description}</p>\n                {isDocumentValid && (\n                  <>\n                    <p className={`status-${document.status}`}>Status: {\n                      document.status === 'pending' ? 'În procesare' :\n                      document.status === 'approved' ? 'Aprobat' :\n                      document.status === 'rejected' ? 'Respinse' :\n                      document.status === 'deleted' ? 'Șters' : document.status\n                    }</p>\n                    <p>Încărcat: {new Date(document.uploadDate || document.createdAt).toLocaleDateString()}</p>\n                  </>\n                )}\n              </div>\n              <div className=\"document-actions\">\n                {isDocumentValid ? (\n                  <>\n                    <button \n                      className={`download-button ${buttonState.isDownloadActive ? 'active' : ''}`}\n                      onClick={() => handleDownload(document.id)}\n                    >\n                      Descarcă\n                    </button>\n                    <button \n                      className={`delete-button ${buttonState.isDeleteActive ? 'active' : ''}`}\n                      onClick={() => handleDocumentDelete(document.id)}\n                    >\n                      Șterge\n                    </button>\n                  </>\n                ) : (\n                  <>\n                    {uploadStatusForType?.file && !uploadStatusForType?.uploaded && (\n                      <button \n                        className=\"upload-button\"\n                        onClick={() => handleUpload(docType.id)}\n                        disabled={uploadStatusForType.uploading}\n                      >\n                        {uploadStatusForType.uploading ? 'Se încarcă...' : 'Încarcă'}\n                      </button>\n                    )}\n                    {!uploadStatusForType?.file && (\n                      <button \n                        className=\"choose-button\"\n                        onClick={() => handleFileSelect(docType.id)}\n                      >\n                        Alege Fișier\n                      </button>\n                    )}\n                  </>\n                )}\n              </div>\n              {uploadStatusForType?.uploading && (\n                <div className=\"upload-progress\">\n                  <div \n                    className=\"progress-bar\"\n                    style={{ width: `${uploadStatusForType.progress}%` }}\n                  ></div>\n                  <span>{uploadStatusForType.progress}%</span>\n                </div>\n              )}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default DocumentsTab;\n"],"names":["_ref","documents","documentTypes","_jsx","className","children","_jsxs","filter","doc","status","length","id","name","description","userData","setDocuments","useState","loading","setLoading","error","setError","uploadStatus","setUploadStatus","buttonStates","setButtonStates","successMessage","setSuccessMessage","useEffect","fetchDocuments","saveButtonState","newButtonStates","forEach","docType","document","find","d","document_type","isDownloadActive","isDeleteActive","localStorage","setItem","JSON","stringify","async","response","axios","get","API_BASE_URL","headers","getAuthHeaders","data","Error","documentsData","success","Array","isArray","processedDocuments","map","url","file_path","uploadDate","createdAt","console","handleApiError","handleFileSelect","docTypeId","input","createElement","type","accept","onchange","e","file","target","files","size","toast","includes","prev","uploading","uploaded","progress","click","handleDownload","documentId","responseType","window","URL","createObjectURL","Blob","link","href","setAttribute","body","appendChild","remove","DocumentCounter","uploadStatusForType","isDocumentValid","buttonState","parse","getItem","_Fragment","Date","toLocaleDateString","onClick","delete","message","updatedDocuments","setTimeout","handleDocumentDelete","_uploadStatus$docType","formData","FormData","append","post","onUploadProgress","progressEvent","Math","round","loaded","total","_response$data$data","newDocument","handleUpload","disabled","style","width"],"sourceRoot":""}