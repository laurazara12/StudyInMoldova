{"version":3,"file":"static/js/102.07a8ecdf.chunk.js","mappings":"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","sources":["views/profile/profile-tabs/notifications-tab.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { API_BASE_URL, getAuthHeaders, handleApiError } from '../../../config/api.config';\nimport axios from 'axios';\nimport { FaCheck, FaFilter, FaExclamationTriangle, FaInfoCircle, FaUserPlus, FaFileUpload, FaClipboardList, FaTrash, FaTimes, FaEdit, FaClock, FaUsers } from 'react-icons/fa';\nimport '../profile.css';\n\nconst NotificationsTab = ({ userData }) => {\n  const [notifications, setNotifications] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [filter, setFilter] = useState('all'); // 'all', 'unread', 'important'\n\n  useEffect(() => {\n    fetchNotifications();\n  }, []);\n\n  const fetchNotifications = async () => {\n    try {\n      setLoading(true);\n      setError(null);\n\n      console.log('Starting to fetch notifications...');\n      const response = await axios.get(`${API_BASE_URL}/api/notifications`, {\n        headers: getAuthHeaders()\n      });\n\n      console.log('Response received:', response.data);\n\n      let notificationsData;\n      if (response.data && Array.isArray(response.data)) {\n        notificationsData = response.data;\n      } else if (response.data?.success && Array.isArray(response.data.data)) {\n        notificationsData = response.data.data;\n      } else {\n        console.error('Invalid data format received:', response.data);\n        throw new Error('Invalid data format received');\n      }\n\n      console.log('Processed notifications data:', notificationsData);\n      setNotifications(notificationsData);\n    } catch (error) {\n      console.error('Detailed error while fetching notifications:', error);\n      setError(handleApiError(error));\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const calculatePriority = (notification) => {\n    console.log('Calculating priority for notification:', notification);\n    const priority = (() => {\n      switch (notification.type) {\n        case 'deadline':\n        case 'document_expired':\n        case 'new_application':\n          return 'high';\n        case 'team':\n        case 'document_rejected':\n        case 'new_document':\n        case 'new_user':\n          return 'medium';\n        default:\n          return 'low';\n      }\n    })();\n    console.log('Calculated priority:', priority);\n    return priority;\n  };\n\n  const calculateExpirationDate = (notification) => {\n    console.log('Calculating expiration date for notification:', notification);\n    const now = new Date();\n    const expiresAt = (() => {\n      switch (notification.type) {\n        case 'deadline':\n          return new Date(notification.deadline);\n        case 'team':\n          return new Date(now.setDate(now.getDate() + 7));\n        default:\n          return new Date(now.setDate(now.getDate() + 30));\n      }\n    })();\n    console.log('Calculated expiration date:', expiresAt);\n    return expiresAt;\n  };\n\n  const getNotificationIcon = (type) => {\n    console.log('Getting icon for notification type:', type);\n    switch (type) {\n      case 'document_deleted':\n        return <FaTrash className=\"notification-icon document-deleted\" />;\n      case 'document_approved':\n        return <FaCheck className=\"notification-icon document-approved\" />;\n      case 'document_rejected':\n        return <FaTimes className=\"notification-icon document-rejected\" />;\n      case 'document_updated':\n        return <FaEdit className=\"notification-icon document-updated\" />;\n      case 'document_expired':\n        return <FaExclamationTriangle className=\"notification-icon document-expired\" />;\n      case 'deadline':\n        return <FaClock className=\"notification-icon deadline\" />;\n      case 'team':\n        return <FaUsers className=\"notification-icon team\" />;\n      default:\n        return getPriorityIcon(calculatePriority({ type }));\n    }\n  };\n\n  const getPriorityIcon = (priority) => {\n    console.log('Getting priority icon for:', priority);\n    switch (priority) {\n      case 'high':\n        return <FaExclamationTriangle className=\"priority-icon high\" />;\n      case 'medium':\n        return <FaInfoCircle className=\"priority-icon medium\" />;\n      default:\n        return null;\n    }\n  };\n\n  const handleNotificationClick = async (notificationId) => {\n    try {\n      console.log('Starting to mark notification as read:', notificationId);\n      \n      // Check if notification exists\n      const notification = notifications.find(n => n.id === notificationId);\n      if (!notification) {\n        console.error('Notification not found:', notificationId);\n        return;\n      }\n\n      // Check if notification is already marked as read\n      if (notification.is_read || notification.read) {\n        console.log('Notification is already marked as read:', notificationId);\n        return;\n      }\n\n      const response = await axios.put(\n        `${API_BASE_URL}/api/notifications/${notificationId}/read`,\n        {},\n        { \n          headers: {\n            ...getAuthHeaders(),\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      \n      console.log('Server response for marking as read:', response.data);\n\n      if (response.data.success) {\n        console.log('Notification successfully marked as read');\n        setNotifications(prevNotifications =>\n          prevNotifications.map(notification =>\n            notification.id === notificationId\n              ? { ...notification, is_read: true, read: true }\n              : notification\n          )\n        );\n      } else {\n        console.error('Server did not confirm marking as read:', response.data);\n      }\n    } catch (error) {\n      console.error('Error marking notification as read:', error);\n      if (error.response) {\n        console.error('Error details:', error.response.data);\n      }\n    }\n  };\n\n  const handleMarkAllRead = async () => {\n    try {\n      console.log('Starting to mark all notifications as read');\n      \n      const response = await axios.put(\n        `${API_BASE_URL}/api/notifications/read-all`,\n        {},\n        { \n          headers: {\n            ...getAuthHeaders(),\n            'Content-Type': 'application/json'\n          }\n        }\n      );\n      \n      console.log('Server response for marking all as read:', response.data);\n\n      if (response.data.success) {\n        console.log('All notifications successfully marked as read');\n        setNotifications(prevNotifications =>\n          prevNotifications.map(notification => ({ \n            ...notification, \n            is_read: true,\n            read: true \n          }))\n        );\n      } else {\n        console.error('Server did not confirm marking all as read:', response.data);\n      }\n    } catch (error) {\n      console.error('Error marking all notifications as read:', error);\n      if (error.response) {\n        console.error('Error details:', error.response.data);\n      }\n    }\n  };\n\n  const filteredNotifications = notifications.filter(notification => {\n    console.log('Filtering notification:', notification);\n    console.log('Current filter:', filter);\n    \n    const isRead = notification.is_read || notification.read; // Check both properties\n    \n    let shouldShow = true;\n    switch (filter) {\n      case 'unread':\n        shouldShow = !isRead;\n        break;\n      case 'important':\n        shouldShow = calculatePriority(notification) === 'high';\n        break;\n      default:\n        shouldShow = true;\n    }\n    \n    console.log('Should show notification:', shouldShow);\n    return shouldShow;\n  });\n\n  const unreadCount = notifications.filter(n => !(n.is_read || n.read)).length;\n\n  if (loading) {\n    return (\n      <div className=\"notifications-container\">\n        <div className=\"loading\">Loading notifications...</div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"notifications-container\">\n        <div className=\"error-message\">{error}</div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"notifications-container\">\n\n        <div className=\"notifications-filters\">\n          <button \n            className={`tab-button ${filter === 'all' ? 'active' : ''}`}\n            onClick={() => {\n              console.log('Setting filter to: all');\n              setFilter('all');\n            }}\n          >\n            All\n          </button>\n          <button \n            className={`tab-button ${filter === 'unread' ? 'active' : ''}`}\n            onClick={() => {\n              console.log('Setting filter to: unread');\n              setFilter('unread');\n            }}\n          >\n            Unread\n          </button>\n          <button \n            className={`tab-button ${filter === 'important' ? 'active' : ''}`}\n            onClick={() => {\n              console.log('Setting filter to: important');\n              setFilter('important');\n            }}\n          >\n            Important\n          </button>\n        </div>\n\n      {unreadCount > 0 && (\n        <button \n          className=\"mark-all-read\"\n          onClick={handleMarkAllRead}\n        >\n          <FaCheck /> Mark all as read\n        </button>\n      )}\n\n      {filteredNotifications.length === 0 ? (\n        <div className=\"no-notifications\">\n          No notifications\n        </div>\n      ) : (\n        <div className=\"notifications-list\">\n          {filteredNotifications.map((notification) => (\n            <div \n              key={notification.id} \n              className={`notification-item ${!(notification.is_read || notification.read) ? 'unread' : ''} ${calculatePriority(notification)}`}\n              onClick={() => handleNotificationClick(notification.id)}\n            >\n              <div className=\"notification-content\">\n                {getNotificationIcon(notification.type)}\n                <h4>{notification.title}</h4>\n                <p>{notification.message}</p>\n                <span className=\"notification-date\">\n                  {new Date(notification.created_at).toLocaleDateString('en-US', {\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric',\n                    hour: '2-digit',\n                    minute: '2-digit'\n                  })}\n                </span>\n              </div>\n              {!(notification.is_read || notification.read) && <div className=\"unread-indicator\" />}\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default NotificationsTab; "],"names":["_ref","userData","notifications","setNotifications","useState","loading","setLoading","error","setError","filter","setFilter","useEffect","fetchNotifications","async","_response$data","console","log","response","axios","get","API_BASE_URL","headers","getAuthHeaders","notificationsData","data","Array","isArray","success","Error","handleApiError","calculatePriority","notification","priority","type","getNotificationIcon","_jsx","FaTrash","className","FaCheck","FaTimes","FaEdit","FaExclamationTriangle","FaClock","FaUsers","getPriorityIcon","FaInfoCircle","filteredNotifications","isRead","is_read","read","shouldShow","unreadCount","n","length","children","_jsxs","onClick","put","prevNotifications","map","notificationId","find","id","handleNotificationClick","title","message","Date","created_at","toLocaleDateString","year","month","day","hour","minute"],"sourceRoot":""}