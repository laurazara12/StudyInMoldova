"use strict";(self.webpackChunkstudy_in_moldova=self.webpackChunkstudy_in_moldova||[]).push([[102],{102:(e,a,t)=>{t.r(a),t.d(a,{default:()=>c});var o=t(43),i=t(375),n=t(213),r=t(204),s=(t(637),t(579));const c=e=>{let{userData:a}=e;const[t,c]=(0,o.useState)([]),[l,d]=(0,o.useState)(!0),[u,m]=(0,o.useState)(null),[f,g]=(0,o.useState)("all");(0,o.useEffect)((()=>{p()}),[]);const p=async()=>{try{var e;d(!0),m(null),console.log("Starting to fetch notifications...");const a=await n.A.get(`${i.JR}/api/notifications`,{headers:(0,i.z5)()});let t;if(console.log("Response received:",a.data),a.data&&Array.isArray(a.data))t=a.data;else{if(null===(e=a.data)||void 0===e||!e.success||!Array.isArray(a.data.data))throw console.error("Invalid data format received:",a.data),new Error("Invalid data format received");t=a.data.data}console.log("Processed notifications data:",t),c(t)}catch(u){console.error("Detailed error while fetching notifications:",u),m((0,i.hS)(u))}finally{d(!1)}},h=e=>{console.log("Calculating priority for notification:",e);const a=(()=>{switch(e.type){case"deadline":case"document_expired":case"new_application":return"high";case"team":case"document_rejected":case"new_document":case"new_user":return"medium";default:return"low"}})();return console.log("Calculated priority:",a),a},j=e=>{switch(console.log("Getting icon for notification type:",e),e){case"document_deleted":return(0,s.jsx)(r.qbC,{className:"notification-icon document-deleted"});case"document_approved":return(0,s.jsx)(r.CMH,{className:"notification-icon document-approved"});case"document_rejected":return(0,s.jsx)(r.QCr,{className:"notification-icon document-rejected"});case"document_updated":return(0,s.jsx)(r.uO9,{className:"notification-icon document-updated"});case"document_expired":return(0,s.jsx)(r.BS8,{className:"notification-icon document-expired"});case"deadline":return(0,s.jsx)(r.w_X,{className:"notification-icon deadline"});case"team":return(0,s.jsx)(r.YXz,{className:"notification-icon team"});default:return v(h({type:e}))}},v=e=>{switch(console.log("Getting priority icon for:",e),e){case"high":return(0,s.jsx)(r.BS8,{className:"priority-icon high"});case"medium":return(0,s.jsx)(r.__w,{className:"priority-icon medium"});default:return null}},x=t.filter((e=>{console.log("Filtering notification:",e),console.log("Current filter:",f);const a=e.is_read||e.read;let t=!0;switch(f){case"unread":t=!a;break;case"important":t="high"===h(e);break;default:t=!0}return console.log("Should show notification:",t),t})),y=t.filter((e=>!(e.is_read||e.read))).length;return l?(0,s.jsx)("div",{className:"notifications-container",children:(0,s.jsx)("div",{className:"loading",children:"Loading notifications..."})}):u?(0,s.jsx)("div",{className:"notifications-container",children:(0,s.jsx)("div",{className:"error-message",children:u})}):(0,s.jsxs)("div",{className:"notifications-container",children:[(0,s.jsxs)("div",{className:"notifications-filters",children:[(0,s.jsx)("button",{className:"tab-button "+("all"===f?"active":""),onClick:()=>{console.log("Setting filter to: all"),g("all")},children:"All"}),(0,s.jsx)("button",{className:"tab-button "+("unread"===f?"active":""),onClick:()=>{console.log("Setting filter to: unread"),g("unread")},children:"Unread"}),(0,s.jsx)("button",{className:"tab-button "+("important"===f?"active":""),onClick:()=>{console.log("Setting filter to: important"),g("important")},children:"Important"})]}),y>0&&(0,s.jsxs)("button",{className:"mark-all-read",onClick:async()=>{try{console.log("Starting to mark all notifications as read");const e=await n.A.put(`${i.JR}/api/notifications/read-all`,{},{headers:{...(0,i.z5)(),"Content-Type":"application/json"}});console.log("Server response for marking all as read:",e.data),e.data.success?(console.log("All notifications successfully marked as read"),c((e=>e.map((e=>({...e,is_read:!0,read:!0})))))):console.error("Server did not confirm marking all as read:",e.data)}catch(u){console.error("Error marking all notifications as read:",u),u.response&&console.error("Error details:",u.response.data)}},children:[(0,s.jsx)(r.CMH,{})," Mark all as read"]}),0===x.length?(0,s.jsx)("div",{className:"no-notifications",children:"No notifications"}):(0,s.jsx)("div",{className:"notifications-list",children:x.map((e=>(0,s.jsxs)("div",{className:`notification-item ${e.is_read||e.read?"":"unread"} ${h(e)}`,onClick:()=>(async e=>{try{console.log("Starting to mark notification as read:",e);const a=t.find((a=>a.id===e));if(!a)return void console.error("Notification not found:",e);if(a.is_read||a.read)return void console.log("Notification is already marked as read:",e);const o=await n.A.put(`${i.JR}/api/notifications/${e}/read`,{},{headers:{...(0,i.z5)(),"Content-Type":"application/json"}});console.log("Server response for marking as read:",o.data),o.data.success?(console.log("Notification successfully marked as read"),c((a=>a.map((a=>a.id===e?{...a,is_read:!0,read:!0}:a))))):console.error("Server did not confirm marking as read:",o.data)}catch(u){console.error("Error marking notification as read:",u),u.response&&console.error("Error details:",u.response.data)}})(e.id),children:[(0,s.jsxs)("div",{className:"notification-content",children:[j(e.type),(0,s.jsx)("h4",{children:e.title}),(0,s.jsx)("p",{children:e.message}),(0,s.jsx)("span",{className:"notification-date",children:new Date(e.created_at).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"})})]}),!(e.is_read||e.read)&&(0,s.jsx)("div",{className:"unread-indicator"})]},e.id)))})]})}}}]);
//# sourceMappingURL=102.07a8ecdf.chunk.js.map